//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `example_survey_0.json`.
    static let example_survey_0Json = Rswift.FileResource(bundle: R.hostingBundle, name: "example_survey_0", pathExtension: "json")
    /// Resource file `example_survey_1.json`.
    static let example_survey_1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "example_survey_1", pathExtension: "json")
    /// Resource file `example_survey_2.json`.
    static let example_survey_2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "example_survey_2", pathExtension: "json")
    /// Resource file `example_survey_3.json`.
    static let example_survey_3Json = Rswift.FileResource(bundle: R.hostingBundle, name: "example_survey_3", pathExtension: "json")
    /// Resource file `example_survey_4.json`.
    static let example_survey_4Json = Rswift.FileResource(bundle: R.hostingBundle, name: "example_survey_4", pathExtension: "json")
    /// Resource file `example_survey_5.json`.
    static let example_survey_5Json = Rswift.FileResource(bundle: R.hostingBundle, name: "example_survey_5", pathExtension: "json")
    /// Resource file `survey_properties.json`.
    static let survey_propertiesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "survey_properties", pathExtension: "json")
    
    /// `bundle.url(forResource: "example_survey_0", withExtension: "json")`
    static func example_survey_0Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_survey_0Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "example_survey_1", withExtension: "json")`
    static func example_survey_1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_survey_1Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "example_survey_2", withExtension: "json")`
    static func example_survey_2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_survey_2Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "example_survey_3", withExtension: "json")`
    static func example_survey_3Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_survey_3Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "example_survey_4", withExtension: "json")`
    static func example_survey_4Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_survey_4Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "example_survey_5", withExtension: "json")`
    static func example_survey_5Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_survey_5Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "survey_properties", withExtension: "json")`
    static func survey_propertiesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.survey_propertiesJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `ArrowForwardSmall`.
    static let arrowForwardSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowForwardSmall")
    /// Image `ArrowForward`.
    static let arrowForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowForward")
    /// Image `BackIconGrey`.
    static let backIconGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackIconGrey")
    /// Image `BackIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackIcon")
    /// Image `BtnBackground`.
    static let btnBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnBackground")
    /// Image `NextIcon`.
    static let nextIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NextIcon")
    /// Image `PickerIcon`.
    static let pickerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PickerIcon")
    /// Image `RectangBackgound`.
    static let rectangBackgound = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangBackgound")
    /// Image `UnileverBtn`.
    static let unileverBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "UnileverBtn")
    /// Image `Unilever`.
    static let unilever = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unilever")
    
    /// `UIImage(named: "ArrowForward", bundle: ..., traitCollection: ...)`
    static func arrowForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowForward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowForwardSmall", bundle: ..., traitCollection: ...)`
    static func arrowForwardSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowForwardSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BackIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BackIconGrey", bundle: ..., traitCollection: ...)`
    static func backIconGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIconGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnBackground", bundle: ..., traitCollection: ...)`
    static func btnBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NextIcon", bundle: ..., traitCollection: ...)`
    static func nextIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PickerIcon", bundle: ..., traitCollection: ...)`
    static func pickerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pickerIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RectangBackgound", bundle: ..., traitCollection: ...)`
    static func rectangBackgound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangBackgound, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unilever", bundle: ..., traitCollection: ...)`
    static func unilever(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unilever, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "UnileverBtn", bundle: ..., traitCollection: ...)`
    static func unileverBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unileverBtn, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ChoiceRowView`.
    static let choiceRowView = _R.nib._ChoiceRowView()
    /// Nib `UIHeaderView`.
    static let uIHeaderView = _R.nib._UIHeaderView()
    /// Nib `UIVideoPreview`.
    static let uIVideoPreview = _R.nib._UIVideoPreview()
    
    /// `UINib(name: "ChoiceRowView", in: bundle)`
    static func choiceRowView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.choiceRowView)
    }
    
    /// `UINib(name: "UIHeaderView", in: bundle)`
    static func uIHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uIHeaderView)
    }
    
    /// `UINib(name: "UIVideoPreview", in: bundle)`
    static func uIVideoPreview(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.uIVideoPreview)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `survey`.
    static let survey: Rswift.ReuseIdentifier<SurveyTableViewCell> = Rswift.ReuseIdentifier(identifier: "survey")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainViewController`, and contains static references to 1 segues.
    struct mainViewController {
      /// Segue identifier `gotoSurveyDetail`.
      static let gotoSurveyDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, SurveyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "gotoSurveyDetail")
      
      /// Optionally returns a typed version of segue `gotoSurveyDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func gotoSurveyDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, SurveyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.gotoSurveyDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 15 localization keys.
    struct localizable {
      /// Base translation: "The following steps will guide you through the process to discover your purpose."
      /// 
      /// Locales: Base, vi
      static let acc_subscribe = Rswift.StringResource(key: "acc_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Bạn còn %d câu chưa trả lời cho Purpose Workshop. Hãy dành thời gian trong ngày mới để hoàn tất nhé
      /// 
      /// Locales: Base, vi
      static let morning_message = Rswift.StringResource(key: "morning_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Click here to record
      /// 
      /// Locales: Base, vi
      static let record_video = Rswift.StringResource(key: "record_video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Dimmis
      /// 
      /// Locales: Base, vi
      static let dimmis = Rswift.StringResource(key: "dimmis", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Email is invalidate!
      /// 
      /// Locales: Base, vi
      static let email_invalidate = Rswift.StringResource(key: "email_invalidate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Enter here
      /// 
      /// Locales: Base, vi
      static let enter_here = Rswift.StringResource(key: "enter_here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Enter your answer here
      /// 
      /// Locales: Base, vi
      static let answer_hint = Rswift.StringResource(key: "answer_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Find Purpose
      /// 
      /// Locales: Base, vi
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Hãy suy nghĩ %d câu trả lời cuối cùng để có một ngày trọn vẹn.
      /// 
      /// Locales: Base, vi
      static let evening_message = Rswift.StringResource(key: "evening_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Record again
      /// 
      /// Locales: Base, vi
      static let record_again = Rswift.StringResource(key: "record_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Start
      /// 
      /// Locales: Base, vi
      static let start_action = Rswift.StringResource(key: "start_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: The answer is empty
      /// 
      /// Locales: Base, vi
      static let answer_empty = Rswift.StringResource(key: "answer_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Your answer has sent
      /// 
      /// Locales: Base, vi
      static let answer_sent = Rswift.StringResource(key: "answer_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: Your overall completion
      /// 
      /// Locales: Base, vi
      static let your_overall = Rswift.StringResource(key: "your_overall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      /// Base translation: en
      /// 
      /// Locales: Base, vi
      static let language_key = Rswift.StringResource(key: "language_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "vi"], comment: nil)
      
      /// Base translation: "The following steps will guide you through the process to discover your purpose."
      /// 
      /// Locales: Base, vi
      static func acc_subscribe(_: Void = ()) -> String {
        return NSLocalizedString("acc_subscribe", bundle: R.hostingBundle, value: "\"The following steps will guide you through the process to discover your purpose.\"", comment: "")
      }
      
      /// Base translation: Bạn còn %d câu chưa trả lời cho Purpose Workshop. Hãy dành thời gian trong ngày mới để hoàn tất nhé
      /// 
      /// Locales: Base, vi
      static func morning_message(_ value1: Int) -> String {
        return String(format: NSLocalizedString("morning_message", bundle: R.hostingBundle, value: "Bạn còn %d câu chưa trả lời cho Purpose Workshop. Hãy dành thời gian trong ngày mới để hoàn tất nhé", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Click here to record
      /// 
      /// Locales: Base, vi
      static func record_video(_: Void = ()) -> String {
        return NSLocalizedString("record_video", bundle: R.hostingBundle, value: "Click here to record", comment: "")
      }
      
      /// Base translation: Dimmis
      /// 
      /// Locales: Base, vi
      static func dimmis(_: Void = ()) -> String {
        return NSLocalizedString("dimmis", bundle: R.hostingBundle, value: "Dimmis", comment: "")
      }
      
      /// Base translation: Email is invalidate!
      /// 
      /// Locales: Base, vi
      static func email_invalidate(_: Void = ()) -> String {
        return NSLocalizedString("email_invalidate", bundle: R.hostingBundle, value: "Email is invalidate!", comment: "")
      }
      
      /// Base translation: Enter here
      /// 
      /// Locales: Base, vi
      static func enter_here(_: Void = ()) -> String {
        return NSLocalizedString("enter_here", bundle: R.hostingBundle, value: "Enter here", comment: "")
      }
      
      /// Base translation: Enter your answer here
      /// 
      /// Locales: Base, vi
      static func answer_hint(_: Void = ()) -> String {
        return NSLocalizedString("answer_hint", bundle: R.hostingBundle, value: "Enter your answer here", comment: "")
      }
      
      /// Base translation: Find Purpose
      /// 
      /// Locales: Base, vi
      static func app_name(_: Void = ()) -> String {
        return NSLocalizedString("app_name", bundle: R.hostingBundle, value: "Find Purpose", comment: "")
      }
      
      /// Base translation: Hãy suy nghĩ %d câu trả lời cuối cùng để có một ngày trọn vẹn.
      /// 
      /// Locales: Base, vi
      static func evening_message(_ value1: Int) -> String {
        return String(format: NSLocalizedString("evening_message", bundle: R.hostingBundle, value: "Hãy suy nghĩ %d câu trả lời cuối cùng để có một ngày trọn vẹn.", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Record again
      /// 
      /// Locales: Base, vi
      static func record_again(_: Void = ()) -> String {
        return NSLocalizedString("record_again", bundle: R.hostingBundle, value: "Record again", comment: "")
      }
      
      /// Base translation: Start
      /// 
      /// Locales: Base, vi
      static func start_action(_: Void = ()) -> String {
        return NSLocalizedString("start_action", bundle: R.hostingBundle, value: "Start", comment: "")
      }
      
      /// Base translation: The answer is empty
      /// 
      /// Locales: Base, vi
      static func answer_empty(_: Void = ()) -> String {
        return NSLocalizedString("answer_empty", bundle: R.hostingBundle, value: "The answer is empty", comment: "")
      }
      
      /// Base translation: Your answer has sent
      /// 
      /// Locales: Base, vi
      static func answer_sent(_: Void = ()) -> String {
        return NSLocalizedString("answer_sent", bundle: R.hostingBundle, value: "Your answer has sent", comment: "")
      }
      
      /// Base translation: Your overall completion
      /// 
      /// Locales: Base, vi
      static func your_overall(_: Void = ()) -> String {
        return NSLocalizedString("your_overall", bundle: R.hostingBundle, value: "Your overall completion", comment: "")
      }
      
      /// Base translation: en
      /// 
      /// Locales: Base, vi
      static func language_key(_: Void = ()) -> String {
        return NSLocalizedString("language_key", bundle: R.hostingBundle, value: "en", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 3 localization keys.
    struct main {
      /// en translation: @unilever.com
      /// 
      /// Locales: en
      static let vqYVhJdpPlaceholder = Rswift.StringResource(key: "vqY-Vh-jdp.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bài tập chuẩn bị cho workshop "Discover your Purpose"
      /// 
      /// Locales: en
      static let pqPMDOiCText = Rswift.StringResource(key: "pqP-mD-OiC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nhập email Unilever của bạn để bắt đầu
      /// 
      /// Locales: en
      static let k32CCPviText = Rswift.StringResource(key: "K32-CC-Pvi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: @unilever.com
      /// 
      /// Locales: en
      static func vqYVhJdpPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("vqY-Vh-jdp.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bài tập chuẩn bị cho workshop "Discover your Purpose"
      /// 
      /// Locales: en
      static func pqPMDOiCText(_: Void = ()) -> String {
        return NSLocalizedString("pqP-mD-OiC.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nhập email Unilever của bạn để bắt đầu
      /// 
      /// Locales: en
      static func k32CCPviText(_: Void = ()) -> String {
        return NSLocalizedString("K32-CC-Pvi.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ChoiceRowView.validate()
      try _UIHeaderView.validate()
      try _UIVideoPreview.validate()
    }
    
    struct _ChoiceRowView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChoiceRowView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BtnBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnBackground' is used in nib 'ChoiceRowView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UIHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UIHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BackIconGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackIconGrey' is used in nib 'UIHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnBackground' is used in nib 'UIHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UnileverBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UnileverBtn' is used in nib 'UIHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UIVideoPreview: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UIVideoPreview"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RectangBackgound", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangBackgound' is used in nib 'UIVideoPreview', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowForwardSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowForwardSmall' is used in nib 'UIVideoPreview', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnBackground' is used in nib 'UIVideoPreview', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceType {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController
      
      let bundle = R.hostingBundle
      let homeViewScreen = StoryboardViewControllerResource<HomeViewController>(identifier: "homeViewScreen")
      let introViewController = StoryboardViewControllerResource<IntroViewController>(identifier: "IntroViewController")
      let mainNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MainNavigationController")
      let mainViewScreen = StoryboardViewControllerResource<MainViewController>(identifier: "mainViewScreen")
      let name = "Main"
      let qCheckboxViewController = StoryboardViewControllerResource<QCheckboxViewController>(identifier: "QCheckboxViewController")
      let qTextViewController = StoryboardViewControllerResource<QTextViewController>(identifier: "QTextViewController")
      let qVideoViewController = StoryboardViewControllerResource<QVideoViewController>(identifier: "QVideoViewController")
      let surveyViewScreen = StoryboardViewControllerResource<SurveyViewController>(identifier: "surveyViewScreen")
      
      func homeViewScreen(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewScreen)
      }
      
      func introViewController(_: Void = ()) -> IntroViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introViewController)
      }
      
      func mainNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNavigationController)
      }
      
      func mainViewScreen(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewScreen)
      }
      
      func qCheckboxViewController(_: Void = ()) -> QCheckboxViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qCheckboxViewController)
      }
      
      func qTextViewController(_: Void = ()) -> QTextViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qTextViewController)
      }
      
      func qVideoViewController(_: Void = ()) -> QVideoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qVideoViewController)
      }
      
      func surveyViewScreen(_: Void = ()) -> SurveyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: surveyViewScreen)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ArrowForward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowForward' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BtnBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangBackgound") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangBackgound' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Unilever") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unilever' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BackIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NextIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NextIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().introViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introViewController' could not be loaded from storyboard 'Main' as 'IntroViewController'.") }
        if _R.storyboard.main().homeViewScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewScreen' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().qVideoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qVideoViewController' could not be loaded from storyboard 'Main' as 'QVideoViewController'.") }
        if _R.storyboard.main().mainNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().qCheckboxViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qCheckboxViewController' could not be loaded from storyboard 'Main' as 'QCheckboxViewController'.") }
        if _R.storyboard.main().qTextViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qTextViewController' could not be loaded from storyboard 'Main' as 'QTextViewController'.") }
        if _R.storyboard.main().surveyViewScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'surveyViewScreen' could not be loaded from storyboard 'Main' as 'SurveyViewController'.") }
        if _R.storyboard.main().mainViewScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewScreen' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
